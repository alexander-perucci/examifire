<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd">
	<modelVersion>4.0.0</modelVersion>
	<parent>
		<groupId>org.springframework.boot</groupId>
		<artifactId>spring-boot-starter-parent</artifactId>
		<version>2.2.6.RELEASE</version>
		<relativePath /> <!-- lookup parent from repository -->
	</parent>
	<groupId>it.univaq.examifire</groupId>
	<artifactId>examifire</artifactId>
	<version>0.0.1-SNAPSHOT</version>
	<name>examifire</name>
	<description>eXamiFire a tool for creating written exams</description>

	<properties>
		<java.version>1.8</java.version>
	</properties>

	<dependencies>
		<!-- Supports built in (or custom) endpoints that let you monitor and manage 
			your application - such as application health, metrics, sessions, etc. -->
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-actuator</artifactId>
		</dependency>
		<!-- Provides fast application restarts, LiveReload, and configurations 
			for enhanced development experience. -->
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-devtools</artifactId>
			<scope>runtime</scope>
			<optional>true</optional>
		</dependency>
		<!-- Build web, including RESTful, applications using Spring MVC. Uses 
			Apache Tomcat as the default embedded container. -->
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-web</artifactId>
		</dependency>
		<!-- Persist data in SQL stores with Java Persistence API using Spring 
			Data and Hibernate. -->
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-data-jpa</artifactId>
		</dependency>
		<!-- MySQL JDBC and R2DBC driver. -->
		<dependency>
			<groupId>mysql</groupId>
			<artifactId>mysql-connector-java</artifactId>
			<scope>runtime</scope>
		</dependency>
		<!-- A modern server-side Java template engine for both web and standalone 
			environments. Allows HTML to be correctly displayed in browsers and as static 
			prototypes. -->
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-thymeleaf</artifactId>
		</dependency>
		<dependency>
			<groupId>org.thymeleaf.extras</groupId>
			<artifactId>thymeleaf-extras-springsecurity5</artifactId>
		</dependency>
		<dependency>
			<groupId>nz.net.ultraq.thymeleaf</groupId>
			<artifactId>thymeleaf-layout-dialect</artifactId>
		</dependency>
		<!-- Highly customizable authentication and access-control framework for 
			Spring applications. -->
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-security</artifactId>
		</dependency>
		
		<!-- Extras -->
		<dependency>
		  <groupId>org.apache.commons</groupId>
		  <artifactId>commons-lang3</artifactId>
		</dependency>
		<dependency>
			<groupId>com.github.darrachequesne</groupId>
			<artifactId>spring-data-jpa-datatables</artifactId>
			<version>5.0.0</version>
		</dependency>
		
		<!-- for testing -->
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-test</artifactId>
			<scope>test</scope>
			<exclusions>
				<exclusion>
					<groupId>org.junit.vintage</groupId>
					<artifactId>junit-vintage-engine</artifactId>
				</exclusion>
			</exclusions>
		</dependency>
		<dependency>
			<groupId>org.springframework.security</groupId>
			<artifactId>spring-security-test</artifactId>
			<scope>test</scope>
		</dependency>
	</dependencies>

	<build>
		<!--
			we need to enable resource filtering in order to properly set the @spring.profiles.active@ placeholder 
			of the property spring.profiles.active in the application.properties file according to the specified profile
			for packaging (or running) the application.
			
			To package the application with a specific profile use the command 'mvn clean package -Pprod'
			(i.e., append a -P parameter to switch among the specified Maven profiles). 
			This command will package the application for prod profile. 
			It also replaces the @spring.profiles.active@ placeholder with the value 'prod', to be used for this application when running.
		-->
		<resources>
	        <resource>
	            <directory>${project.basedir}/src/main/resources</directory>
	            <filtering>true</filtering>
	            <includes>
          			<include>application.properties</include>
          		</includes>	
	        </resource>
	        <resource>
	            <directory>${project.basedir}/src/main/resources</directory>
	            <filtering>false</filtering>
	            <excludes>
          			<exclude>application.properties</exclude>
          		</excludes>
	        </resource>
	    </resources>
	    
		<plugins>
			<plugin>
				<!--
					This plugin is invoked with the command mvn spring-boot:run
					
					For example by configuring the plugin with a 'dev' profile (inside the <configuration> tag),
					maven searchs for the corresponding profile, with id 'dev', in the profiles specified below.
					Then, it replaces the @spring.profiles.active@ placeholder of the spring.profiles.active property 
					within the application.properies file. 
					
					In fact, Spring Boot will automatically load the properties in an application.properties file for all profiles, 
					and the ones in profile-specific .properties files only for the specified profile.
					This means that in our case Spring will load the file application-dev.properties
				-->
				<groupId>org.springframework.boot</groupId>
				<artifactId>spring-boot-maven-plugin</artifactId>
				<configuration>
		            <profiles>
		                <profile>dev</profile>
		            </profiles>
		        </configuration>
			</plugin>
		</plugins>
	</build>
	<!-- 
		Spring profiles can be activated via Maven profiles, by specifying the spring.profiles.active configuration property.
		In every Maven profile, we can set a spring.profiles.active property.
		We need to enable also the resource filtering (see the tag <resources> above) 
	-->
	<profiles>
	    <profile>
	        <id>dev</id>
	        <activation>
	            <activeByDefault>true</activeByDefault>
	        </activation>
	        <properties>
	            <spring.profiles.active>dev</spring.profiles.active>
	        </properties>
	    </profile>
	    <profile>
	        <id>prod</id>
	        <properties>
	            <spring.profiles.active>prod</spring.profiles.active>
	        </properties>
	    </profile>
	</profiles>

</project>
